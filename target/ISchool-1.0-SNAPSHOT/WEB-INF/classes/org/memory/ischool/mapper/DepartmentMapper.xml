<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.memory.ischool.mapper.DepartmentMapper" >
  <resultMap id="BaseResultMap" type="org.memory.ischool.domain.Department" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="sn" property="sn" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="TINYINT" />
    <association property="parent" column="parent_id" javaType="org.memory.ischool.domain.Department" columnPrefix="d_">
      <result column="id" property="id"/>
      <result column="name" property="name"/>
    </association>
    <association property="manage" column="manage_id" javaType="org.memory.ischool.domain.Employee" columnPrefix="e_">
      <result column="id" property="id"/>
      <result column="realname" property="realname"/>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from department
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.memory.ischool.domain.Department" useGeneratedKeys="true" keyProperty="id" >
    insert into department (sn, name, manage_id,
      parent_id, state)
    values (#{sn,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{manage.id,jdbcType=BIGINT},
      #{parent.id,jdbcType=BIGINT}, 1)
  </insert>
  <update id="updateByPrimaryKey" parameterType="org.memory.ischool.domain.Department" >
    update department
    set sn = #{sn,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      manage_id = #{manage.id,jdbcType=BIGINT},
      parent_id = #{parent.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, sn, name, manage_id, parent_id, state
    from department
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select dd.id , dd.sn, dd.name, dd.state,
    e.id as e_id ,e.realname as e_realname,
    d.id as d_id ,d.name as d_name
    from department dd
    LEFT JOIN employee e ON (dd.manage_id = e.id)
    LEFT JOIN department d ON (dd.parent_id = d.id)
  </select>

  <sql id="where_sql">
    <where>
      <if test="keyword!=null and keyword!=''">
        (
        dd.sn like concat('%',#{keyword},'%')
        or dd.name like concat('%',#{keyword},'%')
        or d.name like concat('%',#{keyword},'%')
        )
      </if>
      <if test="stateselect != null">
         and dd.state = #{stateselect}
      </if>
    </where>
  </sql>
  
  <select id="getListData" resultMap="BaseResultMap">
    select dd.*,e.id as e_id ,e.realname as e_realname,d.id as d_id ,d.name as d_name
    from department dd
    LEFT JOIN employee e ON (dd.manage_id = e.id)
    LEFT JOIN department d ON (dd.parent_id = d.id)
    <include refid="where_sql"/>
    limit #{start},#{rows}
  </select>

  <select id="getTotalCount" resultType="long">
    select count(*) from department dd
    LEFT JOIN employee e ON (dd.manage_id = e.id)
    LEFT JOIN department d ON (dd.parent_id = d.id)
    <include refid="where_sql"/>
  </select>

  <update id="changState">
    update department set state = 0 where id = #{id}
  </update>

  <update id="restoreChangState">
    update department set state = 1 where id = #{id}
  </update>
</mapper>